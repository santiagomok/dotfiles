# ------------------------------------------------------------------------------
# File: tmux.conf
# -----------------------------------------k------------------------------------
#
# Based on 
# - https://github.com/samoshkin/tmux-config 
# - https://github.com/henrik/dotfiles.git
# - https://github.com/dminca/dotfiles.git
# - https://blog.petrzemek.net/2016/02/11/my-tmux-configuration/

# ------------------------------------------------------------------------------

# General
set -g history-limit 20000
set -g buffer-limit 20
set -g display-time 1500
set -sg escape-time 0 # See if this fixes slow ESC issues.
# disable mouse - this makes tmux pass control directly to the used terminal emulator, so when I want, 
# I can copy & paste as if I'm not using tmux
setw -g mouse on

set -g status-keys vi   # Enable vi-style keys
setw -g mode-keys vi    # Use vim keybindings in copy mode | http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
setw -g xterm-keys on   # Make shift+arrows, ctrl+arrows etc work in Vim.
set-window-option -g xterm-keys on # Fix ctrl+left/right keys work right
set -g focus-events on  # vim-tmux-clipboard
set -sg escape-time 0   # disable the delay between an <Esc> key press and subsequent characters, increase vim responsiveness 

# ------------------------------------------------------------------------------

# Display

# Colour Table
# colour0   : black
# colour15  : white

if-shell "test -f ~/.config/tmux/theme_iceberg_2_9.conf" "source ~/.config/tmux/theme_iceberg_2_9.conf"
# Set parent terminal title to reflect current window in tmux session
# set -g default-terminal "screen-256color"
set -g set-titles on
set -g set-titles-string "#h | #S | #I:#W"

# encoding
# setw -g utf8 on
# set -g status-utf8 on

# Status bar styling and content.
#set -g status-bg grey
#set -g status-fg white
#set -g status-left ' #S '

# Panes
# is_tmux_27='[[ `tmux -V | cut -d' ' -f2` -eq 2.7 ]]'
# if-shell "$is_tmux_27"  
# set-window-option -g window-active-style bg=colour234
# set-window-option -g window-style 'bg=default'
# set -g pane-border-bg default
# set -g pane-border-fg colour237 
# set -g pane-active-border-bg colour234
# set -g pane-active-border-fg colour75

# set -g pane-border-style fg=white
# set -g pane-active-border-style fg=green

# if-shell "[[ `tmux -V | cut -d' ' -f2` -gt 2.7 ]]"
set-window-option -g window-active-style bg=colour234
set-window-option -g window-style bg=terminal
set -g pane-border-style bg=terminal,fg=colour237
set -g pane-active-border-style bg=colour234,fg=colour75



set-option -g status-position bottom
set -g renumber-windows on  # re-number windows after one of them is closed
set -g base-index 1         # window index start at 1
set -g pane-base-index 1    # pane index start at 1

# Show keyboard layout in prompt, assuming some script writes it to that path;
# it's "/User/…" instead of "~" so VMs can read from their symlinked OS X host home directory.
#set -g status-right ' | #h | %H:%M %m-%d-%y'
#set -g status-right-length 120
#set -g status-interval 2

# Highlight the active window in the status bar.
#set-window-option -g window-status-current-bg green 
#set-window-option -g window-status-current-fg black


# ------------------------------------------------------------------------------
# Key Bindings
#
# Unbind default key bindings to be overriden
unbind-key "\$" # rename-session
unbind-key ,    # rename-window
unbind-key %    # split-window horizontal
unbind-key '"'  # split-window vertical
unbind-key &    # kill-window
unbind-key =    # choose buffer
unbind-key n    # next-window
unbind-key p    # previous-window
unbind-key r    # force rdraw of attached client

# Switch pane
unbind-key Up
unbind-key Down
unbind-key Left
unbind-key Right

# Resize the current pane in steps of one cell
unbind-key C-Up     
unbind-key C-Down
unbind-key C-Left
unbind-key C-Right

# Default key bindings
# bind-key C-b  # leader key
# bind-key ?    # List all key bind-keyings
# bind-key !    # Break the current pane out to a new window
# bind-key .    # Prompt for an index to move current window
# bind-key 0-9  # Select windows index #
# bind-key z    # zoom pane

# Edit ~/.tmux.conf and reload
bind-key C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-nvim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Reloaded config.\"'"

# Reload ~/.tmux.conf
bind-key r source-file ~/.tmux.conf \; display "Reloaded config." 

bind-key c new-window -c '#{pane_current_path}' # new-window and retain cwd
# bind-key C run-shell -b 'alacritty --working-directory ${pane_current_path} -e tmux'

bind-key C-r command-prompt -I "#{window_name}" "rename-window '%%'"
bind-key R command-prompt -I "#{session_name}" "rename-session '%%'"
bind-key _ split-window -v -c '#{pane_current_path}' # split-window horizontal
bind-key | split-window -h -c '#{pane_current_path}' # split-window vertical

# Select panes and windows
bind-key -r C-[ previous-window
bind-key -r C-] next-window
bind-key -r [ select-pane -t :.-
bind-key -r ] select-pane -t :.+
bind-key -r Tab last-window     # Cycle thru MRU tabs
bind-key -r C-o swap-pane -D    # -D: swaps with next pane (numerically)     
bind-key -r M-o swap-pane -U    # -U: swap with preivous pane (numerically)
bind-key -r < swap-window -t -1 # swap window to left
bind-key -r > swap-window -t +1 # swap window to right

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind-key C-, if '[ #{pane_index} -eq 1 ]' \
        'swap-pane -s "!"' \
        'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# vim-like pane resizing
bind-key -r K resize-pane -U 5
bind-key -r J resize-pane -D 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind-key -n C-h run "($is_vim && tmux send-keys C-h) || tmux select-pane -L"
bind-key -n C-j run "($is_vim && tmux send-keys C-j) \
                     || ($is_fzf && tmux send-keys C-j) \
                     || tmux select-pane -D"
# bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k run "($is_vim && tmux send-keys C-k) \
                     || ($is_fzf && tmux send-keys C-k) \
                     || tmux select-pane -U"
# bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l run "($is_vim && tmux send-keys C-l) || tmux select-pane -R"
# bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
# bind-key -T copy-mode-vi C-h select-pane -L
# bind-key -T copy-mode-vi C-j select-pane -D
# bind-key -T copy-mode-vi C-k select-pane -U
# bind-key -T copy-mode-vi C-l select-pane -R
# bind-key -T copy-mode-vi C-\ select-pane -l

# vim-tmux-resizer
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n M-h if-shell "$is_vim" "send-keys M-h" "resize-pane -L 10"
bind -n M-l if-shell "$is_vim" "send-keys M-l" "resize-pane -R 10"
bind -n M-k if-shell "$is_vim" "send-keys M-k" "resize-pane -U 5"
bind -n M-j if-shell "$is_vim" "send-keys M-j" "resize-pane -D 5"

# Link window
#bind-key / command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Kill pane/window/session
bind-key x kill-pane # don't prompt
bind-key X kill-pane -a # don't prompt kill all other panes
bind-key C-x kill-window # don't prompt
bind-key Q confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind-key C-q confirm-before -p "kill-session #s? (y/n)" kill-session

# Detach
bind-key d detach
bind-key D if -F '#{session_many_attached}' \
        'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
        'display "Session has only 1 client attached"'

# ------------------------------------------------------------------------------

# Window monitoring for activity and silence 

bind-key m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind-key M if -F '#{monitor-silence}' \
        'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
        'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
setw -g monitor-activity off
set -g visual-activity on

# TODO: Does not work as well, check on newer versions
# set -g visual-silence on

# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
# set -g visual-bell on
# setw -g bell-action other
# --------------------------------------
# Copy and Paste
# --------------------------------------

# https://github.com/samoshkin/tmux-config
# ANSI 52 OSC use to copy between local and remote tmux session
# yank="~/.local/bin/yank.sh"
# <leader> Alt+v to start copy mode
# 'v' to begin selection as in Vim
bind-key M-v copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
#bind-key -T copy-mode-vi Y send-keys -X copy-pipe-and-cancel "$yank"

# Copy selection on mouse drag event
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -i -f -selection primary | xclip -i -selection clipboard"

# Paste
bind-key p paste-buffer
bind-key M-p choose-buffer

# Default is clipboard external
# set-clipboard on|external

# Unbork my iTerm ctrl+1 etc mappings in tmux 2.1
# https://github.com/tmux/tmux/issues/159
#set -g assume-paste-time 0

# --------------------------------------
# Tmux Plugin Manager
# --------------------------------------
# List of plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'

# Solarized theme
# set -g @plugin 'seebi/tmux-colors-solarized'
# set -g @colors-solarized 'dark'

# Terminal type configuration
# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",xterm-256color:Tc"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'

