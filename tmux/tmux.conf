# Based on 
# - https://github.com/henrik/dotfiles.git
# - https://github.com/dminca/dotfiles.git
#set-option -g default-command "tmux-shell-wrapper"

############################################################################
# Display
############################################################################
#run-shell "powerline-daemon-q"
#source ${HOME}/.local/lib/python3.6/site-packages/powerline/bindings/tmux/powerline.conf 

# Colour Table
# colour0   : black
# colour15  : white

# start window indexing at 1 instead of 0 
set -g base-index 1
set -g pane-base-index 1

# Status bar styling and content.
#set -g status-bg colour0
set -g status-fg white
set -g status-left ' #S '

# Status bar at top
set-option -g status-position bottom

# Show keyboard layout in prompt, assuming some script writes it to that path;
# it's "/User/â€¦" instead of "~" so VMs can read from their symlinked OS X host home directory.
set -g status-right ' #T | #h | %H:%M %m-%d-%y'
#set -g status-right-length 120
#set -g status-interval 2

# Highlight the active window in the status bar.
#set-window-option -g window-status-current-bg green 
#set-window-option -g window-status-current-fg black

# Panes
set -g pane-border-bg colour0
set -g pane-border-fg colour6
set -g pane-active-border-bg colour0
set -g pane-active-border-fg colour12

#------------------------------------------------------------
# Panes options
#------------------------------------------------------------
# Set 'v' for vertical and 'h' for horizontal split
bind-key v split-window -h -c '#{pane_current_path}'
bind-key b split-window -v -c '#{pane_current_path}'

# vim-like pane resizing
bind-key -r K resize-pane -U 5
bind-key -r J resize-pane -D 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l

# Fix ctrl+left/right keys work right
set-window-option -g xterm-keys on

# Make shift+arrows, ctrl+arrows etc work in Vim.
set -g xterm-keys on

# See if this fixes slow ESC issues.
# http://unix.stackexchange.com/questions/23138/esc-key-causes-a-small-delay-in-terminal-due-to-its-alt-behavior
set -s escape-time 0

# Enable mouse scrolling 
set-option -g mouse on

# Don't prompt to kill panes/windows.
bind-key x kill-pane
bind-key & kill-window

# Cycle panes.
#bind b select-pane -t :.+
#bind C-b select-pane -t :.+

# More intuitive split-window mappings.
#bind "'" split-window -h
#bind - split-window -v

# Maximize pane, e.g. for copying.
#bind-key z resize-pane -Z

# Switch pane and zoom
# https://twitter.com/tskogberg/status/792025881573199872
#bind C-z select-pane -t :.+ \; resize-pane -Z

# Reload tmux conf.
unbind r
bind r source-file ~/.tmux.conf\; display "Reloaded conf."

# --------------------------------------
# Copy and Paste
# --------------------------------------
# http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection
bind-key C-v paste-buffer
# For copy-paste with remote-server refer to reverse tunneling

# Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# Unbork my iTerm ctrl+1 etc mappings in tmux 2.1
# https://github.com/tmux/tmux/issues/159
#set -g assume-paste-time 0

############################################################################
# Unbindings
############################################################################
# remove default binding since replacing
unbind %
unbind Up
unbind Down
unbind Left
unbind Right

unbind C-Up
unbind C-Down
unbind C-Left
unbind C-Right

